// Arquivo para testar a conex√£o com o banco de dados
import mysql from 'mysql2/promise';
import dotenv from 'dotenv';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

// Inicializar ambiente
dotenv.config();
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Configura√ß√£o do banco de dados
const dbConfig = {
  host: process.env.DB_HOST || 'localhost',
  user: process.env.DB_USER || 'root',
  password: process.env.DB_PASSWORD || 'Chewie2020!',
  database: process.env.DB_NAME || 'level_all',
  port: process.env.DB_PORT || 3306
};

console.log('üîç Verificando conex√£o com o banco de dados MySQL...');
console.log('Configura√ß√£o:', {
  host: dbConfig.host,
  user: dbConfig.user,
  database: dbConfig.database,
  port: dbConfig.port
});

// Tentar conectar sem especificar o banco de dados primeiro
const testServerConnection = async () => {
  try {
    const serverConfig = { ...dbConfig };
    delete serverConfig.database; // Remover o banco de dados para verificar apenas conex√£o com servidor
    
    console.log('\n1Ô∏è‚É£ Testando conex√£o com o servidor MySQL (sem especificar banco)...');
    const connection = await mysql.createConnection(serverConfig);
    console.log('‚úÖ Conex√£o com o servidor MySQL estabelecida!');
    
    // Verificar se o servidor est√° funcionando
    const [rows] = await connection.query('SELECT 1 + 1 AS result');
    console.log('‚úÖ Servidor MySQL funcionando corretamente. Resultado da consulta:', rows[0]);
    
    await connection.end();
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao conectar ao servidor MySQL:', error);
    console.error('‚ùó Verifique se o servidor MySQL est√° em execu√ß√£o e se as credenciais est√£o corretas.');
    return false;
  }
};

// Verificar se o banco de dados existe
const checkDatabaseExists = async () => {
  try {
    const serverConfig = { ...dbConfig };
    delete serverConfig.database;
    
    console.log(`\n2Ô∏è‚É£ Verificando se o banco de dados '${dbConfig.database}' existe...`);
    const connection = await mysql.createConnection(serverConfig);
    
    const [rows] = await connection.query(
      `SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = ?`, 
      [dbConfig.database]
    );
    
    if (rows.length > 0) {
      console.log(`‚úÖ O banco de dados '${dbConfig.database}' existe!`);
      await connection.end();
      return true;
    } else {
      console.log(`‚ùå O banco de dados '${dbConfig.database}' N√ÉO existe!`);
      
      // Verificar o arquivo SQL para cria√ß√£o do banco
      const sqlFilePath = path.join(__dirname, '..', 'db', 'LEVEL_ALL_POPULADA.sql');
      
      if (fs.existsSync(sqlFilePath)) {
        console.log(`‚ÑπÔ∏è Arquivo SQL encontrado em: ${sqlFilePath}`);
        console.log('‚ÑπÔ∏è Para criar o banco de dados, execute o comando:');
        console.log(`mysql -u ${dbConfig.user} -p < "${sqlFilePath}"`);
      } else {
        console.log('‚ùå Arquivo SQL n√£o encontrado!');
      }
      
      await connection.end();
      return false;
    }
  } catch (error) {
    console.error('‚ùå Erro ao verificar a exist√™ncia do banco de dados:', error);
    return false;
  }
};

// Verificar as tabelas no banco de dados
const checkTables = async () => {
  try {
    console.log(`\n3Ô∏è‚É£ Verificando tabelas no banco de dados '${dbConfig.database}'...`);
    const connection = await mysql.createConnection(dbConfig);
    
    const [rows] = await connection.query(
      `SELECT TABLE_NAME 
       FROM INFORMATION_SCHEMA.TABLES 
       WHERE TABLE_SCHEMA = ? 
       AND TABLE_NAME IN ('user_gamer', 'user_developer', 'user_investor', 'user_admin')`, 
      [dbConfig.database]
    );
    
    console.log(`üìã Tabelas encontradas (${rows.length} de 4 esperadas):`);
    rows.forEach((row, index) => {
      console.log(`${index + 1}. ${row.TABLE_NAME}`);
    });
    
    // Verificar se todas as tabelas necess√°rias existem
    const expectedTables = ['user_gamer', 'user_developer', 'user_investor', 'user_admin'];
    const foundTables = rows.map(row => row.TABLE_NAME);
    
    const missingTables = expectedTables.filter(table => !foundTables.includes(table));
    
    if (missingTables.length > 0) {
      console.log('‚ùå Tabelas faltando:', missingTables.join(', '));
    } else {
      console.log('‚úÖ Todas as tabelas necess√°rias existem!');
    }
    
    await connection.end();
    return rows.length === expectedTables.length;
  } catch (error) {
    console.error('‚ùå Erro ao verificar as tabelas:', error);
    return false;
  }
};

// Verificar se h√° registros nas tabelas
const checkRecords = async () => {
  try {
    console.log('\n4Ô∏è‚É£ Verificando registros nas tabelas de usu√°rios...');
    const connection = await mysql.createConnection(dbConfig);
    
    const tables = ['user_gamer', 'user_developer', 'user_investor', 'user_admin'];
    let allTablesHaveRecords = true;
    
    for (const table of tables) {
      const [rows] = await connection.query(`SELECT COUNT(*) as count FROM ${table}`);
      const count = rows[0].count;
      
      if (count > 0) {
        console.log(`‚úÖ Tabela '${table}' tem ${count} registros.`);
      } else {
        console.log(`‚ö†Ô∏è Tabela '${table}' n√£o tem registros.`);
        allTablesHaveRecords = false;
      }
    }
    
    // Verificar usu√°rio espec√≠fico para teste de login
    const [testUser] = await connection.query(
      `SELECT * FROM user_gamer WHERE username = 'shadowwolf01'`
    );
    
    if (testUser.length > 0) {
      console.log('‚úÖ Usu√°rio de teste "shadowwolf01" encontrado na tabela user_gamer.');
    } else {
      console.log('‚ùå Usu√°rio de teste "shadowwolf01" N√ÉO encontrado na tabela user_gamer.');
      allTablesHaveRecords = false;
    }
    
    await connection.end();
    return allTablesHaveRecords;
  } catch (error) {
    console.error('‚ùå Erro ao verificar registros:', error);
    return false;
  }
};

// Executar a sequ√™ncia de testes
const runTests = async () => {
  console.log('üß™ Iniciando diagn√≥stico do banco de dados...\n');
  
  const serverConnected = await testServerConnection();
  if (!serverConnected) {
    return summarizeResults(false, false, false);
  }
  
  const databaseExists = await checkDatabaseExists();
  if (!databaseExists) {
    return summarizeResults(true, false, false);
  }
  
  const tablesExist = await checkTables();
  const recordsExist = await checkRecords();
  
  return summarizeResults(true, databaseExists, tablesExist, recordsExist);
};

// Resumir resultados
const summarizeResults = (serverOk, dbOk, tablesOk, recordsOk) => {
  console.log('\nüìä RESUMO DO DIAGN√ìSTICO:');
  console.log(`- Servidor MySQL: ${serverOk ? '‚úÖ OK' : '‚ùå FALHA'}`);
  console.log(`- Banco de dados: ${dbOk ? '‚úÖ OK' : '‚ùå FALHA'}`);
  console.log(`- Tabelas: ${tablesOk ? '‚úÖ OK' : '‚ùå FALHA'}`);
  console.log(`- Registros: ${recordsOk ? '‚úÖ OK' : '‚ö†Ô∏è ALERTA'}`);
  
  console.log('\nüìã DIAGN√ìSTICO FINAL:');
  if (!serverOk) {
    console.log('‚ùå O servidor MySQL n√£o est√° acess√≠vel. Verifique se o servi√ßo est√° em execu√ß√£o.');
  } else if (!dbOk) {
    console.log(`‚ùå O banco de dados '${dbConfig.database}' n√£o existe. Execute o script SQL para cri√°-lo.`);
  } else if (!tablesOk) {
    console.log('‚ùå Faltam tabelas necess√°rias no banco de dados. Execute o script SQL completo.');
  } else if (!recordsOk) {
    console.log('‚ö†Ô∏è Algumas tabelas n√£o t√™m registros ou o usu√°rio de teste n√£o foi encontrado.');
  } else {
    console.log('‚úÖ Tudo parece estar configurado corretamente!');
  }
  
  console.log('\nüõ†Ô∏è PR√ìXIMOS PASSOS:');
  if (!serverOk) {
    console.log('1. Inicie o servidor MySQL');
    console.log('2. Verifique as credenciais no arquivo .env ou config/database.js');
  } else if (!dbOk) {
    console.log(`1. Execute o script SQL para criar o banco: mysql -u ${dbConfig.user} -p < "db/LEVEL_ALL_POPULADA.sql"`);
  } else if (!tablesOk || !recordsOk) {
    console.log('1. Execute o script SQL completo para criar todas as tabelas e inserir dados');
  } else {
    console.log('1. Inicie o servidor backend: node index.js');
    console.log('2. Acesse o frontend e tente fazer login');
  }
};

// Executar o diagn√≥stico
runTests();
